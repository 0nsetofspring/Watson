// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ## 유저 관련 모델 ##
model User {
  id        Int      @id @default(autoincrement())
  nickname  String   @unique
  email     String   @unique
  createdAt DateTime @default(now())

  // 유저와 다른 모델과의 관계 설정
  playthroughs  Playthrough[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  achievedEndings UserEnding[]
}

model UserEnding {
  unlockedAt DateTime @default(now())

  // User와 Ending의 중간 테이블 (N:M 관계)
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  ending    Ending @relation(fields: [endingId], references: [id])
  endingId  Int

  @@id([userId, endingId]) // 두 ID를 묶어 고유 키로 사용
}


// ## 게임 플레이 관련 모델 ##
model Scenario {
  id            Int      @id @default(autoincrement())
  title         String
  settingPrompt String

  // 시나리오와 다른 모델과의 관계 설정
  npcs          Npc[]
  endings       Ending[]
  playthroughs  Playthrough[]
}

model Npc {
  id            Int      @id @default(autoincrement())
  name          String
  settingPrompt String

  // Npc와 Scenario의 관계 설정 (N:1)
  scenario   Scenario @relation(fields: [scenarioId], references: [id])
  scenarioId Int
}

model Ending {
  id          Int      @id @default(autoincrement())
  name        String
  description String

  // Ending과 Scenario의 관계 설정 (N:1)
  scenario   Scenario @relation(fields: [scenarioId], references: [id])
  scenarioId Int

  // Ending과 User의 관계 설정
  achievedByUsers UserEnding[]
}

model Playthrough {
  id        Int      @id @default(autoincrement())
  status    String   // "in_progress", "completed" 등
  createdAt DateTime @default(now())

  // Playthrough와 다른 모델과의 관계 설정
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  scenario  Scenario @relation(fields: [scenarioId], references: [id])
  scenarioId Int
  chatLogs  ChatLog[]
}

model ChatLog {
  id              Int      @id @default(autoincrement())
  isUserMessage   Boolean
  messageText     String
  isHighlighted   Boolean  @default(false)
  createdAt       DateTime @default(now())

  // ChatLog와 Playthrough의 관계 설정 (N:1)
  playthrough   Playthrough @relation(fields: [playthroughId], references: [id])
  playthroughId Int
}


// ## 커뮤니티 관련 모델 ##
model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())

  // Post와 다른 모델과의 관계 설정
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  // Comment와 다른 모델과의 관계 설정
  author   User @relation(fields: [authorId], references: [id])
  authorId Int
  post     Post @relation(fields: [postId], references: [id])
  postId   Int
}

model Like {
  // Like와 다른 모델과의 관계 설정
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@id([userId, postId]) // 두 ID를 묶어 고유 키로 사용
}