generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email           String        @unique
  createdAt       DateTime      @default(now())
  nickname        String        @unique
  id              Int           @id @default(autoincrement())
  comments        Comment[]
  likes           Like[]
  playthroughs    Playthrough[]
  posts           Post[]
  achievedEndings UserEnding[]
}

model UserEnding {
  unlockedAt DateTime @default(now())
  userId     Int
  endingId   Int
  ending     Ending   @relation(fields: [endingId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, endingId])
}

model Scenario {
  id               Int      @id @default(autoincrement())
  title            String
  settingPrompt    String
  backgroundScript String
  imageUrl         String   // webp 등 이미지 URL 또는 파일 경로 (필수)
  endings          Ending[]
  npcs             Npc[]
  playthroughs     Playthrough[]
}

model Npc {
  id            Int      @id @default(autoincrement())
  name          String
  settingPrompt String
  scenarioId    Int
  scenario      Scenario @relation(fields: [scenarioId], references: [id])
  chatLogs      ChatLog[]
}

model Ending {
  id              Int          @id @default(autoincrement())
  name            String
  description     String
  scenarioId      Int
  scenario        Scenario     @relation(fields: [scenarioId], references: [id])
  achievedByUsers UserEnding[]
}

model Playthrough {
  id         Int       @id @default(autoincrement())
  status     String
  createdAt  DateTime  @default(now())
  userId     Int
  scenarioId Int
  chatLogs   ChatLog[]
  scenario   Scenario  @relation(fields: [scenarioId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model ChatLog {
  id            Int         @id @default(autoincrement())
  isUserMessage Boolean
  messageText   String
  isHighlighted Boolean     @default(false)
  createdAt     DateTime    @default(now())
  playthroughId Int
  playthrough   Playthrough @relation(fields: [playthroughId], references: [id])
  npcId         Int?        // 어떤 NPC가 보낸 메시지인지 (nullable)
  npc           Npc?        @relation(fields: [npcId], references: [id])
}

model Post {
  title     String
  content   String
  createdAt DateTime  @default(now())
  id        Int       @id @default(autoincrement())
  authorId  Int
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id])
}

model Comment {
  content   String
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  userId Int
  postId Int
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}
