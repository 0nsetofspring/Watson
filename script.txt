## [LLM 추리 웹게임] 아이디어 구체화

### 주요 기능
1. 추리 게임 → 제한적인 정보를 유저가 직접 수집해서, 이를 바탕으로 주어진 정답을 추리하는 과정
    LLM을 이용한다고 하면, ‘유저가 정보를 수집하는 과정’에서 챗봇과 대화하는 것처럼 구현.
    물리적인 시스템은 구현 난이도와 시간 문제가 있음 → ‘서울 2033’처럼 텍스트 기반, 혹은 단순한 선택지 기반 게임
2. 로그인 기능 → 각자 어떤 엔딩을 봤는지 자랑할 수 있고, 커뮤니티를 통해 엔딩에 대한 힌트를 공유할 수 있음.

### 유저 경험 (플로우)
1. 추리 게임을 좋아하는 유저 지민. 해당 웹게임을 웹을 통해서 접속한다. (도메인을 통해)
2. 회원가입을 한다. 카카오나 구글 등의 외부 계정을 통해 회원가입을 해서 게임에 접속한다.
3. 로그인 후, 메인 화면으로 온다.
4. ‘커뮤니티’ 버튼을 누른다.
    1. 자기 프로필, 커뮤니티 글의 제목, 작성자, 대표 이미지 (정보 공유용 글 / 시나리오 공유 글 , 글쓰기 버튼을 확인할 수 있다.
    2. 정보 공유용 글을 눌렀을 땐, 제목, 작성자, 글 내용, 글 이미지, 좋아요, 댓글을 확인할 수 있다. 댓글 작성도 할 수 있다.
    3. 시나리오 공유용 글을 눌렀을 땐, 정보 공유용 글과 똑같지만 추가로 ‘다운로드 하기’ 버튼과 ‘총 다운 횟수’를 볼 수 있다.
    4. 뒤로 가기를 눌러 이전 화면으로 돌아간다.
5. ‘게임 시작’ 버튼을 누른다.
    1. 공식 시나리오 혹은 유저 시나리오 중 원하는 시나리오를 선택한다
    2. 게임 홈 화면
        1. 설정
            1. 로그 → 지금까지 나눈 대화기록을 볼 수 있다
            2. 메모 → 대화기록 중 하이라이트한 부분만 모아 보여준다
            3. 나가기 → 초기메인 화면으로 이동한다
        2. 사건 현장
            1. 수사관 외 인물 선택 → 채팅창을 통해 대화를 나눈다
            2. 수사관 선택 → 등장인물 버튼을 눌러 추리한 범인이 누구인지 제출한다
                1. 모든 인물과 한 번 이상 대화를 하도록 제한

## 개발
### 개발 초기 단계
1. 프레임워크 (기술 스택) 선정
    1. 프론트  : React
    2. 백 : `Node.js` + `Express.js`
    3. DB : PostgreSQL + Prisma
    4. LLM : Gemini